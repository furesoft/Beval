@namespace Beval
@classname BevalParser
@using Loyc;
@using Loyc.Syntax;

@start CompilationUnit

CompilationUnitLine<LNode> = includeStatement / aliasStatement / binaryExpression
CompilationUnit<LNode> = _o line:CompilationUnitLine* _o EOF {SyntaxNode.CreateBlock(line)}

identifier<LNode> -memoize = id:("" ([a-zA-Z_][a-zA-Z_0-9!^<>=]*)) {SyntaxNode.CreateID(id)}
stringLiteral<LNode> = "'" val:("" stringCharacter*) "'" {SyntaxNode.CreateString(val)}

includeStatement<LNode> = "include" _ file:stringLiteral _ ";" {SyntaxNode.CreateInclude(file)}

binaryExpression<LNode> = "(" expr:binaryExpression ")" {expr}
							/ f:identifier _ op:identifier _ s:binaryExpression {SyntaxNode.CreateBinaryExpression(f, op, s)}
							/ unaryExpression
							/ id:identifier {id}
unaryExpression<LNode> = id:identifier _o arg:binaryExpression {SyntaxNode.CreateUnaryExpression(id, arg)}

aliasStatement<LNode> -public = "alias" _ name:identifier _o "=" _o value:identifier {SyntaxNode.CreateAlias(name, value)}

functionStatement<LNode> -public = functionWithArgs / functionWithoutArgs
functionWithoutArgs<LNode> = id:identifier _o "=" _o body:Block {SyntaxNode.CreateFunction(id, body)}
functionWithInput<LNode> = id:identifier _o inputs:argList _o "=" _o body:Block {SyntaxNode.CreateFunction(id, inputs, body)}
functionWithOutput<LNode> = id:identifier _o inputs:argList _o "," _o outputs:argList "=" _o body:Block {SyntaxNode.CreateFunction(id, inputs, outputs, body)}
functionWithArgs<LNode> = functionWithInput / functionWithOutput

Block<LNode> = lines:blockLine* {SyntaxNode.CreateBlock(lines)}
blockLine<LNode> = binaryExpression

argList<LNode> = f:identifier _ s:argList {SyntaxNode.Combine(f, s)}
				 / id:identifier {id}

stringCharacter  = !("'" / "\\" / eolChar) char:. { @char }

whitespace = [\t ] / EOL
_ -memoize = (whitespace / EOL / comment)*
_o = _?

comment -memoize = singleLineComment / multiLineComment

singleLineComment -memoize -lexical = "//" (!eolChar .)*

multiLineComment -lexical  = "/*" (!"*/" .)* "*/"

eolChar = [\n\r\u2028\u2029]

EOL = '\n' / '\r' / '\r\n'
EOF = !.  / unexpected:&. #error{ "LLC0001: Unexpected '" + unexpected + "'" }