@namespace Beval
@classname BevalParser
@using Loyc;
@using Loyc.Syntax;

@start CompilationUnit

CompilationUnitPart<LNode> = includeStatement / aliasStatement / functionStatement / binaryExpression
CompilationUnitLine<LNode> = _o part:CompilationUnitPart _o ";" {part}
CompilationUnit<LNode> = _o line:CompilationUnitLine* _o EOF {SyntaxNode.CreateBlock(line)}

identifier<LNode> -memoize = id:("" ([a-z_][a-zA-Z_0-9]*)) {SyntaxNode.CreateID(id)}
stringLiteral<LNode> = "'" val:("" stringCharacter*) "'" {SyntaxNode.CreateString(val)}
value<LNode> = val:(("true" / "1") {"true"} / ("false" / "0") {"false"}) {SyntaxNode.CreateValue(val)}

includeStatement<LNode> = "include" _ file:stringLiteral _ ";" {SyntaxNode.CreateInclude(file)}

binaryExpression<LNode> -public -memoize = "(" expr:binaryExpression ")" {SyntaxNode.InBrackets(expr)}
							/ f:identifier _ op:identifier _ s:binaryExpression {SyntaxNode.CreateBinaryExpression(f, op, s)}
							/ f:value _ op:identifier _ s:binaryExpression  {SyntaxNode.CreateBinaryExpression(f, op, s)}
							/ id:identifier _o arg:binaryExpression {SyntaxNode.CreateUnaryExpression(id, arg)}
							/ value
							/ id:identifier {id}

aliasStatement<LNode> -public = _o "alias" _ name:identifier _o "=" _o value:identifier {SyntaxNode.CreateAlias(name, value)}

functionStatement<LNode> -public = functionWithArgs / functionWithoutArgs
functionWithoutArgs<LNode> = id:identifier _o "=" _o body:Block {SyntaxNode.CreateFunction(id, body)}
functionWithInput<LNode> = id:identifier _o inputs:argList _o "=" _o body:Block {SyntaxNode.CreateFunction(id, inputs, body)}
functionWithOutput<LNode> = id:identifier _o inputs:argList _o "," _o outputs:argList "=" _o body:Block {SyntaxNode.CreateFunction(id, inputs, outputs, body)}
functionWithArgs<LNode> = functionWithInput / functionWithOutput

Block<LNode> = lines:blockLine* {SyntaxNode.CreateBlock(lines)}
blockLine<LNode> = binaryExpression

argList<LNode> -memoize = f:identifier _ s:argList {SyntaxNode.Combine(f, s)}
				 / id:identifier {id}

stringCharacter  = !("'" / "\\" / eolChar) char:. { @char }
identifierChar =	[a-zA-Z_0-9] / "^" / "!" / "<" / ">" / "="

whitespace = [\t ] / EOL
_ -memoize = (whitespace / EOL / comment)*
_o = _?

comment -memoize = singleLineComment / multiLineComment

singleLineComment -memoize -lexical = "//" (!eolChar .)*

multiLineComment -lexical  = "/*" (!"*/" .)* "*/"

eolChar = [\n\r\u2028\u2029]

EOL = '\n' / '\r' / '\r\n'
EOF = !.  / unexpected:&. #error{ "LLC0001: Unexpected '" + unexpected + "'" }